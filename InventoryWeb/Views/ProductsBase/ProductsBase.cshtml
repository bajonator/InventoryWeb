@model InventoryWeb.Core.ViewModels.ProductsDbViewModel


<div class="row">
    <div class="col-md-8">
        <div class="d-flex justify-content-center mt-4">
            <h2>Baza produktów</h2>
        </div>
        <div class="border border-dark col-md-12 rounded-2">
            <div class="mt-3">
                    @await Html.PartialAsync("_ProductBaseTable")
            </div>
        </div>
    </div>
    <div class="col-md-4 mt-4">
        <div id="productFormContainer">
            <h2 class="text-center">Dodaj Produkt</h2>
            <form id="saveFormProdBase" method="post">
                <div class=" text-center border rounded-2 border-dark">
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(x => x.ProductBase.Id)
                    <div class="form-group m-2">
                        <div class="d-flex justify-content-center">
                            <label asp-for="ProductBase.Code" class="control-label" style="color:darkred">Zeskanuj kod lub wpisz ręcznie</label>
                        </div>
                        @Html.LabelFor(x => x.ProductBase.Code)
                        @Html.TextBoxFor(x => x.ProductBase.Code, new { @class = "form-control", autofocus = "autofocus", id="kodinput", placeholder = "Wpisz kod produktu" })
                        @Html.ValidationMessageFor(x => x.ProductBase.Code, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group m-2">
                        @Html.LabelFor(x => x.ProductBase.NameProductDb)
                        @Html.TextBoxFor(x => x.ProductBase.NameProductDb, new { @class = "form-control", autofocus = "autofocus", id="nameinput", placeholder = "Wpisz nazwę produktu" })
                        @Html.ValidationMessageFor(x => x.ProductBase.NameProductDb, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group m-2">
                        @Html.LabelFor(x => x.ProductBase.EachPrice)
                        @Html.TextBoxFor(x => x.ProductBase.EachPrice, new { @class = "form-control", id="priceinput"})
                    </div>
                    <div class="d-flex justify-content-center m-2">
                        <button type="button" id="addDb" class="btn btn-primary btn">Dodaj</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>


@section Scripts
    {
    <script type="text/javascript">

        function deleteProduct(id, btn) {
            if (!confirm("Czy na pewno chcesz usunąć jednostkę?"))
                return;

            $.ajax({
                type: "POST",
                url: "@Url.Action("DeleteProductDb", "ProductsBase")",
                data: {
                    id: id
                },
                success: function (data) {
                    if (data.success) {
                        var row = btn.parentNode.parentNode;
                        row.parentNode.removeChild(row);
                    } else {
                        alert(data.message);
                    }
                },
                error: function (data) {
                    alert(data.message)
                },
                dataType: "json"
            });
            return;
        }
        function editProductDb(productId) {
            var prodBase = $("#editForm-" + productId).serialize();
            $.ajax({
                type: "POST",
                url: '@Url.Action("EditProductDb", "ProductsBase")',
                data: prodBase,
                success: function (data) {
                    if (data.success) {
                        $(".modal-backdrop").remove();
                        $("#EditProdBaseModal-" + productId).modal("hide").on("hidden.bs.modal", function () {
                        });
                        location.reload();
                    } else {
                        alert("Błąd podczas edycji produktu.");
                    }
                }
            });
        }
        $("#addDb").click(function () {
            var prodForm = $("#saveFormProdBase").serialize();
            $.ajax({
                type: "POST",
                url: '@Url.Action("AddProductDb", "ProductsBase")',
                data: prodForm,
                success: function (data) {
                    $('#nameinput').val('');
                    $('#kodinput').val('');
                    $('#priceinput').val('0');
                    $('#kodinput').focus();
                    $("#productsBaseTable").html(data);
                },
                error: function (data) {
                    alert("Ne udało sie dodać produktu.\nSprawdź czy pole kod i nazwa produktu są wypełnione.");
                },
                dataType: "html"
            });
        });
    </script>
}
